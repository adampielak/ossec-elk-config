#
input {
    udp {
        host => "127.0.0.1"
        port => 9000
        queue_size => 5000  # default 2000
        workers  => 2       # default 2
        type => "ossec"
    }
    syslog {
        type => "syslog"
        host => "0.0.0.0"
        port => 514
    }
}

filter {
    if [type] == "ossec" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} ossec: %{GREEDYDATA:ossec_data}" }
            add_tag => [ "ossec" ]
        }
    
        if "ossec" in [tags] {
            grok {
                match => { "ossec_data" => "Alert Level: %{NONNEGINT:Alert_Level:int}; Rule: %{NONNEGINT:Rule:int} - %{DATA:Description}; Location: \(%{DATA:Agent}\) %{IP:Agent_IP}->%{DATA:log_file}; (srcip: %{IP:src_ip};%{SPACE})?(dstip: %{IP:dst_ip};%{SPACE})?(src_port: %{NONNEGINT:src_port:int};%{SPACE})?(dst_port: %{NONNEGINT:dst_port:int};%{SPACE})?(user: %{USER:User};%{SPACE})?%{GREEDYDATA:log_message}" }
                match => { "ossec_data" => "Alert Level: %{NONNEGINT:Alert_Level:int}; Rule: %{NONNEGINT:Rule:int} - %{DATA:Description}; Location: %{DATA:Agent}->%{DATA:log_file}; (srcip: %{IP:src_ip};%{SPACE})?(dstip: %{IP:dst_ip};%{SPACE})?(src_port: %{NONNEGINT:src_port:int};%{SPACE})?(dst_port: %{NONNEGINT:dst_port:int};%{SPACE})?(user: %{USER:User};%{SPACE})?%{GREEDYDATA:log_message}" }
                add_tag => [ "ossecproc" ]
            }

            grok {
                match => { "log_message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                match => { "log_message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-)' }
                match => { "log_message" => "%{GREEDYDATA}" }
            }

            if [syslog_program] {      
                noop {
                    add_field => [ "received_at", "%{@timestamp}" ]
                    add_field => [ "received_from", "%{host}" ]
                    add_tag => [ "syslog" ]
                    add_field => [ "source_program", "%{syslog_program}" ]
                }
            }
            else if [verb] { 
                noop {
                    add_tag => [ "apachelog" ]
                    add_field => [ "source_program", "httpd" ]
                }
                mutate {
                    convert => [ "responsecode", "integer", "responsesize", "integer", "resp_time", "integer" ]
                }
            }
            else if [log_file] == "syscheck" {
                grok {
                    match => { "log_message" => "%{GREEDYDATA} Integrity checksum changed for: '%{DATA:corrupted_file}'" }
                    add_tag => [ "integrity" ]
                    add_field => [ "source_program", "integrity" ]
                }
            }
            else {
                noop {
                    add_field => [ "source_program", "ossec" ]
                }
            }
        }
    }

    if [type] == "syslog" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
            add_field => [ "received_at", "%{@timestamp}" ]
            add_field => [ "received_from", "%{host}" ]
            add_tag => [ "syslog" ]
        }
    }
}

output {
    elasticsearch_http {
        host => "127.0.0.1"
    }
#  stdout {
#    codec => rubydebug
#  }
}
