#
input {
    udp {
        host => "127.0.0.1"
        port => 9000
        queue_size => 5000  # default 2000
        workers  => 2       # default 2
        type => "ossec"
    }
    udp {
        host => "0.0.0.0"
        queue_size => 5000  # default 2000
        workers  => 4       # default 2
        port => 514
        type => "syslog_udp"
    }
}

filter {
    if [type] == "ossec" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} ossec: %{GREEDYDATA:ossec_data}" }
            add_tag => [ "ossec" ]
        }
    
        if "ossec" in [tags] {
            grok {
                match => { "ossec_data" => "Alert Level: %{NONNEGINT:Alert_Level:int}; Rule: %{NONNEGINT:Rule:int} - %{DATA:Description}; Location: \(%{DATA:Agent}\) %{IP:Agent_IP}->%{DATA:log_file}; (srcip: %{IP:src_ip};%{SPACE})?(dstip: %{IP:dst_ip};%{SPACE})?(src_port: %{NONNEGINT:src_port:int};%{SPACE})?(dst_port: %{NONNEGINT:dst_port:int};%{SPACE})?(user: %{USER:User};%{SPACE})?%{GREEDYDATA:log_message}" }
                match => { "ossec_data" => "Alert Level: %{NONNEGINT:Alert_Level:int}; Rule: %{NONNEGINT:Rule:int} - %{DATA:Description}; Location: %{DATA:Agent}->%{DATA:log_file}; (srcip: %{IP:src_ip};%{SPACE})?(dstip: %{IP:dst_ip};%{SPACE})?(src_port: %{NONNEGINT:src_port:int};%{SPACE})?(dst_port: %{NONNEGINT:dst_port:int};%{SPACE})?(user: %{USER:User};%{SPACE})?%{GREEDYDATA:log_message}" }
                add_tag => [ "ossecproc" ]
            }

            if "ossecproc" in [tags] {
                # check for syslog embedded message in ossec alert
                grok {
                    match => { "log_message" => "%{SYSLOGTIMESTAMP} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                    tag_on_failure => []
                    add_tag => "log_message_match"
                    add_tag => "syslog_type"
                }
                if "log_message_match" not in [tags] {
                    # check for APACHE type ossec log_message
                    grok {
                        match => { "log_message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-)' }
                        tag_on_failure => []
                        add_tag => "log_message_match"
                        add_tag => [ "apache" ]
                        add_field => [ "source_program", "httpd" ]
                    }
                }
                if "log_message_match" not in [tags] {
                    # check for SQUID type ossec log_message
                    grok {
                        match => { "log_message" => "%{NUMBER:unix_timestamp}\s+%{NUMBER:elapsed:int}\s+%{IP:clientip}\s+%{WORD:cache_request}/%{NUMBER:response}\s+%{NUMBER:bytes:int}\s+%{WORD:verb}\s+%{URI:request}\s+(?:%{WORD:user}|-)\s+%{WORD:peerstatus}/(?:%{IP:peerhost}|-)\s+%{GREEDYDATA:mime_type}" }
                        tag_on_failure => []
                        add_tag => "log_message_match"
                        add_tag => "squid"
                        add_field => [ "source_program", "squid" ]
                    }
                }
                if "log_message_match" not in [tags] {
                    grok {
                        match => { "log_message" => "%{GREEDYDATA}" }
                        add_tag => "log_message_match"
                    }
                }
                if "apache" in [tags] {
                    mutate {
                        convert => [ "responsecode", "integer", "responsesize", "integer", "resp_time", "integer" ]
                    }
                }
                if "squid" in [tags] {
                    date {
                        match => [ "unix_timestamp", "UNIX" ]
                    }
                }
            }

            if "syslog_type" in [tags] { 
                noop {
                    add_field => [ "received_at", "%{@timestamp}" ]
                    add_field => [ "received_from", "%{host}" ]
                    add_tag => [ "syslog" ]
                    add_field => [ "source_program", "%{syslog_program}" ]
                }
                if [source_program] == "sshd" {
                    grok {
                        match => { "syslog_message" => "Failed password for %{USERNAME:ssh_user} from %{IP:client_ip} port %{BASE10NUM:port} ssh2" }
                        match => { "syslog_message" => "Failed password for invalid user %{USERNAME:ssh_user} from %{IP:client_ip} port %{BASE10NUM:port} ssh2" }
                        match => { "syslog_message" => "pam_unix\(sshd:auth\):\s+authentication failure;\s+logname=(%{USERNAME:logname})?\s+uid=%{BASE10NUM:uid}\s+euid=%{BASE10NUM:euid}\s+tty=(%{DATA:tty})?\s+ruser=(%{USERNAME:ruser})?\s+rhost=(%{HOSTNAME:remote_host}|)?\s+user=%{USERNAME:ssh_user}" }
                        match => { "syslog_message" => "Accepted password for %{USERNAME:ssh_user} from %{IP:client_ip} port %{BASE10NUM:port} ssh2" }
                        match => { "syslog_message" => "pam_unix\(sshd:session\): session opened for user %{USERNAME:ssh_user} by \(uid=%{BASE10NUM:uid}\)"}
                        match => { "syslog_message" => "pam_unix\(sshd:session\): session closed for user %{USERNAME:ssh_user}"}
                        match => { "syslog_message" => "%{GREEDYDATA}"}
                        add_tag => [ "ssh" ]
                    }
                }
                if [source_program] == "sudo" {
                    grok {
                        match => { "syslog_message" => "%{USERNAME:source_user}\s+:\s+TTY=%{DATA:tty}\s+;\s+PWD=%{DATA:pwd}\s+;\s+USER=%{USERNAME:sudo_user}\s+;\s+COMMAND=%{GREEDYDATA:sudo_command}" }
                        match => { "syslog_message" => "%{GREEDYDATA}"}
                        add_tag => [ "sudo" ]
                    }
                }
            }
            else if [log_file] == "syscheck" {
                grok {
                    match => { "log_message" => "%{GREEDYDATA} Integrity checksum changed for: '%{DATA:corrupted_file}'" }
                    match => { "log_message" => "File '%{DATA:corrupted_file}' %{GREEDYDATA}" }
                    add_tag => [ "integrity" ]
                    add_field => [ "source_program", "integrity" ]
                }
            }
            else if ! [source_program] {
                noop {
                    add_field => [ "source_program", "ossec" ]
                }
            }
        }
    }

    if [type] == "syslog_udp" {
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" }
            add_field => [ "received_at", "%{@timestamp}" ]
            add_field => [ "received_from", "%{host}" ]
            add_tag => [ "syslog" ]
        }
        if "syslog" in [tags] {
            grok {
                match => { "syslog_message" => "%{DATA:vhost}:%{WORD:vport} %{COMBINEDAPACHELOG}" }
                add_tag => [ "apachelog" ]
            }

            if "apachelog" in [tags] {
                mutate {
                    convert => [ "responsecode", "integer", "responsesize", "integer", "resp_time", "integer", "bytes", "integer" ]
                }

                if [clientip] and [clientip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)"  {
                    geoip {
                        source => "clientip"
                        target => "geoip"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                    }

                    mutate {
                        convert => [ "[geoip][coordinates]", "float" ]
                    }
                }
                if [agent] != "-" and [agent] != "" {
                    useragent {
                        source => "agent"
                    }
                }
            }
        }
    }
}

output {
    if [type] == "ossec" {
        elasticsearch_http {
            host => "127.0.0.1"
            workers => 2
        }
    }
    if [type] == "syslog_udp" {
        elasticsearch_http {
            host => "127.0.0.1"
            index => "rproxy-%{+YYYY.MM.dd}"
            workers => 2
        }
    }
#    if [type] == "ossec" {
#        stdout {
#            codec => rubydebug
#        }
#    }
}
